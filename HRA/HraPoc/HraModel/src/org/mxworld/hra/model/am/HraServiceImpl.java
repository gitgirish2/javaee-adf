package org.mxworld.hra.model.am;

import oracle.jbo.Key;
import oracle.jbo.NameValuePairs;
import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.ViewLinkImpl;

import org.mxworld.hra.common.framework.HraApplicationModuleImpl;
import org.mxworld.hra.common.framework.HraViewObjectImpl;
import org.mxworld.hra.model.am.common.HraService;
import org.mxworld.hra.model.eo.ImagesImpl;
import org.mxworld.hra.model.vo.AllEmpImagesRowImpl;
import org.mxworld.hra.model.vo.AllEmployeesImpl;
import org.mxworld.hra.model.vo.AllEmployeesRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sun Apr 27 21:14:22 EDT 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class HraServiceImpl extends HraApplicationModuleImpl implements HraService {
    /**
     * This is the default constructor (do not remove).
     */
    public HraServiceImpl() {
    }

    /**
     * Container's getter for EmpSearch.
     * @return EmpSearch
     */
    public HraViewObjectImpl getEmpSearch() {
        return (HraViewObjectImpl) findViewObject("EmpSearch");
    }

    /**
     * Container's getter for DeptSelector.
     * @return DeptSelector
     */
    public HraViewObjectImpl getDeptSelector() {
        return (HraViewObjectImpl) findViewObject("DeptSelector");
    }

    /**
     * Container's getter for DepartmentTree.
     * @return DepartmentTree
     */
    public HraViewObjectImpl getDepartmentTree() {
        return (HraViewObjectImpl) findViewObject("DepartmentTree");
    }

    /**
     * Container's getter for EmployeesByDepartment.
     * @return EmployeesByDepartment
     */
    public AllEmployeesImpl getEmployeesByDepartment() {
        return (AllEmployeesImpl) findViewObject("EmployeesByDepartment");
    }

    /**
     * Container's getter for EditEmp.
     * @return EditEmp
     */
    public AllEmployeesImpl getEditEmp() {
        return (AllEmployeesImpl) findViewObject("EditEmp");
    }

    /**
     * Container's getter for EmpJobHistory.
     * @return EmpJobHistory
     */
    public HraViewObjectImpl getEmpJobHistory() {
        return (HraViewObjectImpl) findViewObject("EmpJobHistory");
    }

    /**
     * Container's getter for EmpBio.
     * @return EmpBio
     */
    public HraViewObjectImpl getEmpBio() {
        return (HraViewObjectImpl) findViewObject("EmpBio");
    }

    /**
     * Container's getter for AllEmpImages.
     * @return AllEmpImages
     */
    public HraViewObjectImpl getAllEmpImages() {
        return (HraViewObjectImpl) findViewObject("AllEmpImages");
    }

    /**
     * Container's getter for DeptSelectionVL1.
     * @return DeptSelectionVL1
     */
    public ViewLinkImpl getDeptSelectionVL1() {
        return (ViewLinkImpl) findViewLink("DeptSelectionVL1");
    }

    /**
     * Container's getter for DepartmentsToEmployeesVL1.
     * @return DepartmentsToEmployeesVL1
     */
    public ViewLinkImpl getDepartmentsToEmployeesVL1() {
        return (ViewLinkImpl) findViewLink("DepartmentsToEmployeesVL1");
    }

    /**
     * Container's getter for EmpJobHistoryVL1.
     * @return EmpJobHistoryVL1
     */
    public ViewLinkImpl getEmpJobHistoryVL1() {
        return (ViewLinkImpl) findViewLink("EmpJobHistoryVL1");
    }

    /**
     * Container's getter for EmpBioVL1.
     * @return EmpBioVL1
     */
    public ViewLinkImpl getEmpBioVL1() {
        return (ViewLinkImpl) findViewLink("EmpBioVL1");
    }

    /**
     * Container's getter for EmpImagesVL1.
     * @return EmpImagesVL1
     */
    public ViewLinkImpl getEmpImagesVL1() {
        return (ViewLinkImpl) findViewLink("EmpImagesVL1");
    }

    public void createNewImageForEmployee(Integer employeeId, String imageName) {
        System.out.println("In createNewImageForEmployee(): empId=" + employeeId + "; image=" + imageName);
        AllEmployeesRowImpl empRow = getEmpRow(employeeId);
        if (empRow != null) {
            createAndInsertImage(empRow, imageName);
            getAllEmpImages().setAssociationConsistent(true);
            System.out.println("exiting createNewImageForEmployee()");
        }
    }

    private AllEmployeesRowImpl getEmpRow(Integer employeeId) {
        AllEmployeesRowImpl empRow = null;
        HraViewObjectImpl empRows = this.getEditEmp();
        Key key = new Key(new Object[] { employeeId });
        Row[] hits = empRows.findByKey(key, 1);
        if (hits.length > 0) {
            empRow = (AllEmployeesRowImpl) hits[0];
        }
        return empRow;
    }

    private void createAndInsertImage(AllEmployeesRowImpl empRow, String imageName) {
        System.out.println("In createAndInsertImage()");
        RowSet empImages = (RowSet) empRow.getAllEmpImages();
        //Create an Image
        EntityDefImpl imageDef = EntityDefImpl.findDefObject("org.mxworld.hra.model.eo.Images");
        ImagesImpl newImage = (ImagesImpl) imageDef.createInstance2(getDBTransaction(), null);
        newImage.setImage(imageName);
        //Initalize the values for, and then Create an Image Usage
        //in the context of the current Employee row
        NameValuePairs initializeUsage = new NameValuePairs();
        initializeUsage.setAttribute("ImageId", newImage.getImageId());
        initializeUsage.setAttribute("DefaultImage", "N");
        AllEmpImagesRowImpl newUsage = (AllEmpImagesRowImpl) empImages.createAndInitRow(initializeUsage);
    }
}

