package org.mxworld.hra.model.vo;

import java.math.BigDecimal;

import java.sql.Timestamp;

import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.RowSet;
import oracle.jbo.domain.DBSequence;
import oracle.jbo.server.AttributeDefImpl;

import org.mxworld.hra.common.framework.HraEntityImpl;
import org.mxworld.hra.common.framework.HraViewRowImpl;
import org.mxworld.hra.model.eo.EmployeesImpl;
import org.mxworld.hra.model.eo.ImageUsagesImpl;
import org.mxworld.hra.model.eo.ImagesImpl;
import org.mxworld.hra.model.vo.common.AllEmployeesRow;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sun Apr 27 21:13:52 EDT 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AllEmployeesRowImpl extends HraViewRowImpl implements AllEmployeesRow {
    public static final int ENTITY_EMPLOYEES = 0;
    public static final int ENTITY_JOBS = 1;
    public static final int ENTITY_MANAGER = 2;
    public static final int ENTITY_EMPIMAGEUSAGES = 3;
    public static final int ENTITY_IMAGES = 4;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        EmployeeId,
        FirstName,
        LastName,
        Email,
        PhoneNumber,
        JobId,
        JobsJobId,
        JobTitle,
        CommissionPct,
        CreatedBy,
        CreatedDate,
        DepartmentId,
        HireDate,
        ManagerId,
        ModifiedBy,
        ModifiedDate,
        Salary,
        ManagerFirstName,
        ManagerEmployeeId,
        ManagerLastName,
        Image,
        ImageId,
        DefaultImage,
        ImageId1,
        UsageType,
        AssociatedId,
        AllJobHistory,
        EmpBio,
        AllEmpImages,
        DeptLovAccessor,
        JobsLovAccessor,
        FilteredManagerLovAccessor;
        static AttributesEnum[] vals = null;
        ;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int EMPLOYEEID = AttributesEnum.EmployeeId.index();
    public static final int FIRSTNAME = AttributesEnum.FirstName.index();
    public static final int LASTNAME = AttributesEnum.LastName.index();
    public static final int EMAIL = AttributesEnum.Email.index();
    public static final int PHONENUMBER = AttributesEnum.PhoneNumber.index();
    public static final int JOBID = AttributesEnum.JobId.index();
    public static final int JOBSJOBID = AttributesEnum.JobsJobId.index();
    public static final int JOBTITLE = AttributesEnum.JobTitle.index();
    public static final int COMMISSIONPCT = AttributesEnum.CommissionPct.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int CREATEDDATE = AttributesEnum.CreatedDate.index();
    public static final int DEPARTMENTID = AttributesEnum.DepartmentId.index();
    public static final int HIREDATE = AttributesEnum.HireDate.index();
    public static final int MANAGERID = AttributesEnum.ManagerId.index();
    public static final int MODIFIEDBY = AttributesEnum.ModifiedBy.index();
    public static final int MODIFIEDDATE = AttributesEnum.ModifiedDate.index();
    public static final int SALARY = AttributesEnum.Salary.index();
    public static final int MANAGERFIRSTNAME = AttributesEnum.ManagerFirstName.index();
    public static final int MANAGEREMPLOYEEID = AttributesEnum.ManagerEmployeeId.index();
    public static final int MANAGERLASTNAME = AttributesEnum.ManagerLastName.index();
    public static final int IMAGE = AttributesEnum.Image.index();
    public static final int IMAGEID = AttributesEnum.ImageId.index();
    public static final int DEFAULTIMAGE = AttributesEnum.DefaultImage.index();
    public static final int IMAGEID1 = AttributesEnum.ImageId1.index();
    public static final int USAGETYPE = AttributesEnum.UsageType.index();
    public static final int ASSOCIATEDID = AttributesEnum.AssociatedId.index();
    public static final int ALLJOBHISTORY = AttributesEnum.AllJobHistory.index();
    public static final int EMPBIO = AttributesEnum.EmpBio.index();
    public static final int ALLEMPIMAGES = AttributesEnum.AllEmpImages.index();
    public static final int DEPTLOVACCESSOR = AttributesEnum.DeptLovAccessor.index();
    public static final int JOBSLOVACCESSOR = AttributesEnum.JobsLovAccessor.index();
    public static final int FILTEREDMANAGERLOVACCESSOR = AttributesEnum.FilteredManagerLovAccessor.index();

    /**
     * This is the default constructor (do not remove).
     */
    public AllEmployeesRowImpl() {
    }

    /**
     * Gets Employees entity object.
     * @return the Employees
     */
    public EmployeesImpl getEmployees() {
        return (EmployeesImpl) getEntity(ENTITY_EMPLOYEES);
    }

    /**
     * Gets Jobs entity object.
     * @return the Jobs
     */
    public HraEntityImpl getJobs() {
        return (HraEntityImpl) getEntity(ENTITY_JOBS);
    }

    /**
     * Gets Manager entity object.
     * @return the Manager
     */
    public EmployeesImpl getManager() {
        return (EmployeesImpl) getEntity(ENTITY_MANAGER);
    }

    /**
     * Gets EmpImageUsages entity object.
     * @return the EmpImageUsages
     */
    public ImageUsagesImpl getEmpImageUsages() {
        return (ImageUsagesImpl) getEntity(ENTITY_EMPIMAGEUSAGES);
    }

    /**
     * Gets Images entity object.
     * @return the Images
     */
    public ImagesImpl getImages() {
        return (ImagesImpl) getEntity(ENTITY_IMAGES);
    }

    /**
     * Gets the attribute value for EMPLOYEE_ID using the alias name EmployeeId.
     * @return the EMPLOYEE_ID
     */
    public DBSequence getEmployeeId() {
        return (DBSequence) getAttributeInternal(EMPLOYEEID);
    }

    /**
     * Sets <code>value</code> as attribute value for EMPLOYEE_ID using the alias name EmployeeId.
     * @param value value to set the EMPLOYEE_ID
     */
    public void setEmployeeId(DBSequence value) {
        setAttributeInternal(EMPLOYEEID, value);
    }

    /**
     * Gets the attribute value for FIRST_NAME using the alias name FirstName.
     * @return the FIRST_NAME
     */
    public String getFirstName() {
        return (String) getAttributeInternal(FIRSTNAME);
    }

    /**
     * Sets <code>value</code> as attribute value for FIRST_NAME using the alias name FirstName.
     * @param value value to set the FIRST_NAME
     */
    public void setFirstName(String value) {
        setAttributeInternal(FIRSTNAME, value);
    }

    /**
     * Gets the attribute value for LAST_NAME using the alias name LastName.
     * @return the LAST_NAME
     */
    public String getLastName() {
        return (String) getAttributeInternal(LASTNAME);
    }

    /**
     * Sets <code>value</code> as attribute value for LAST_NAME using the alias name LastName.
     * @param value value to set the LAST_NAME
     */
    public void setLastName(String value) {
        setAttributeInternal(LASTNAME, value);
    }

    /**
     * Gets the attribute value for EMAIL using the alias name Email.
     * @return the EMAIL
     */
    public String getEmail() {
        return (String) getAttributeInternal(EMAIL);
    }

    /**
     * Sets <code>value</code> as attribute value for EMAIL using the alias name Email.
     * @param value value to set the EMAIL
     */
    public void setEmail(String value) {
        setAttributeInternal(EMAIL, value);
    }

    /**
     * Gets the attribute value for PHONE_NUMBER using the alias name PhoneNumber.
     * @return the PHONE_NUMBER
     */
    public String getPhoneNumber() {
        return (String) getAttributeInternal(PHONENUMBER);
    }

    /**
     * Sets <code>value</code> as attribute value for PHONE_NUMBER using the alias name PhoneNumber.
     * @param value value to set the PHONE_NUMBER
     */
    public void setPhoneNumber(String value) {
        setAttributeInternal(PHONENUMBER, value);
    }

    /**
     * Gets the attribute value for JOB_ID using the alias name JobId.
     * @return the JOB_ID
     */
    public String getJobId() {
        return (String) getAttributeInternal(JOBID);
    }

    /**
     * Sets <code>value</code> as attribute value for JOB_ID using the alias name JobId.
     * @param value value to set the JOB_ID
     */
    public void setJobId(String value) {
        setAttributeInternal(JOBID, value);
    }

    /**
     * Gets the attribute value for JOB_ID using the alias name JobsJobId.
     * @return the JOB_ID
     */
    public String getJobsJobId() {
        return (String) getAttributeInternal(JOBSJOBID);
    }

    /**
     * Gets the attribute value for JOB_TITLE using the alias name JobTitle.
     * @return the JOB_TITLE
     */
    public String getJobTitle() {
        return (String) getAttributeInternal(JOBTITLE);
    }

    /**
     * Sets <code>value</code> as attribute value for JOB_TITLE using the alias name JobTitle.
     * @param value value to set the JOB_TITLE
     */
    public void setJobTitle(String value) {
        setAttributeInternal(JOBTITLE, value);
    }

    /**
     * Gets the attribute value for COMMISSION_PCT using the alias name CommissionPct.
     * @return the COMMISSION_PCT
     */
    public BigDecimal getCommissionPct() {
        return (BigDecimal) getAttributeInternal(COMMISSIONPCT);
    }

    /**
     * Sets <code>value</code> as attribute value for COMMISSION_PCT using the alias name CommissionPct.
     * @param value value to set the COMMISSION_PCT
     */
    public void setCommissionPct(BigDecimal value) {
        setAttributeInternal(COMMISSIONPCT, value);
    }

    /**
     * Gets the attribute value for CREATED_BY using the alias name CreatedBy.
     * @return the CREATED_BY
     */
    public String getCreatedBy() {
        return (String) getAttributeInternal(CREATEDBY);
    }

    /**
     * Gets the attribute value for CREATED_DATE using the alias name CreatedDate.
     * @return the CREATED_DATE
     */
    public Timestamp getCreatedDate() {
        return (Timestamp) getAttributeInternal(CREATEDDATE);
    }

    /**
     * Gets the attribute value for DEPARTMENT_ID using the alias name DepartmentId.
     * @return the DEPARTMENT_ID
     */
    public Integer getDepartmentId() {
        return (Integer) getAttributeInternal(DEPARTMENTID);
    }

    /**
     * Sets <code>value</code> as attribute value for DEPARTMENT_ID using the alias name DepartmentId.
     * @param value value to set the DEPARTMENT_ID
     */
    public void setDepartmentId(Integer value) {
        setAttributeInternal(DEPARTMENTID, value);
    }

    /**
     * Gets the attribute value for HIRE_DATE using the alias name HireDate.
     * @return the HIRE_DATE
     */
    public Timestamp getHireDate() {
        return (Timestamp) getAttributeInternal(HIREDATE);
    }

    /**
     * Sets <code>value</code> as attribute value for HIRE_DATE using the alias name HireDate.
     * @param value value to set the HIRE_DATE
     */
    public void setHireDate(Timestamp value) {
        setAttributeInternal(HIREDATE, value);
    }

    /**
     * Gets the attribute value for MANAGER_ID using the alias name ManagerId.
     * @return the MANAGER_ID
     */
    public Integer getManagerId() {
        return (Integer) getAttributeInternal(MANAGERID);
    }

    /**
     * Sets <code>value</code> as attribute value for MANAGER_ID using the alias name ManagerId.
     * @param value value to set the MANAGER_ID
     */
    public void setManagerId(Integer value) {
        setAttributeInternal(MANAGERID, value);
    }

    /**
     * Gets the attribute value for MODIFIED_BY using the alias name ModifiedBy.
     * @return the MODIFIED_BY
     */
    public String getModifiedBy() {
        return (String) getAttributeInternal(MODIFIEDBY);
    }

    /**
     * Gets the attribute value for MODIFIED_DATE using the alias name ModifiedDate.
     * @return the MODIFIED_DATE
     */
    public Timestamp getModifiedDate() {
        return (Timestamp) getAttributeInternal(MODIFIEDDATE);
    }

    /**
     * Gets the attribute value for SALARY using the alias name Salary.
     * @return the SALARY
     */
    public BigDecimal getSalary() {
        return (BigDecimal) getAttributeInternal(SALARY);
    }

    /**
     * Sets <code>value</code> as attribute value for SALARY using the alias name Salary.
     * @param value value to set the SALARY
     */
    public void setSalary(BigDecimal value) {
        setAttributeInternal(SALARY, value);
    }

    /**
     * Gets the attribute value for FIRST_NAME using the alias name ManagerFirstName.
     * @return the FIRST_NAME
     */
    public String getManagerFirstName() {
        return (String) getAttributeInternal(MANAGERFIRSTNAME);
    }

    /**
     * Sets <code>value</code> as attribute value for FIRST_NAME using the alias name ManagerFirstName.
     * @param value value to set the FIRST_NAME
     */
    public void setManagerFirstName(String value) {
        setAttributeInternal(MANAGERFIRSTNAME, value);
    }

    /**
     * Gets the attribute value for EMPLOYEE_ID using the alias name ManagerEmployeeId.
     * @return the EMPLOYEE_ID
     */
    public DBSequence getManagerEmployeeId() {
        return (DBSequence) getAttributeInternal(MANAGEREMPLOYEEID);
    }

    /**
     * Sets <code>value</code> as attribute value for EMPLOYEE_ID using the alias name ManagerEmployeeId.
     * @param value value to set the EMPLOYEE_ID
     */
    public void setManagerEmployeeId(DBSequence value) {
        setAttributeInternal(MANAGEREMPLOYEEID, value);
    }

    /**
     * Gets the attribute value for LAST_NAME using the alias name ManagerLastName.
     * @return the LAST_NAME
     */
    public String getManagerLastName() {
        return (String) getAttributeInternal(MANAGERLASTNAME);
    }

    /**
     * Sets <code>value</code> as attribute value for LAST_NAME using the alias name ManagerLastName.
     * @param value value to set the LAST_NAME
     */
    public void setManagerLastName(String value) {
        setAttributeInternal(MANAGERLASTNAME, value);
    }

    /**
     * Gets the attribute value for IMAGE using the alias name Image.
     * @return the IMAGE
     */
    public String getImage() {
        return (String) getAttributeInternal(IMAGE);
    }

    /**
     * Sets <code>value</code> as attribute value for IMAGE using the alias name Image.
     * @param value value to set the IMAGE
     */
    public void setImage(String value) {
        setAttributeInternal(IMAGE, value);
    }

    /**
     * Gets the attribute value for IMAGE_ID using the alias name ImageId.
     * @return the IMAGE_ID
     */
    public DBSequence getImageId() {
        return (DBSequence) getAttributeInternal(IMAGEID);
    }

    /**
     * Sets <code>value</code> as attribute value for IMAGE_ID using the alias name ImageId.
     * @param value value to set the IMAGE_ID
     */
    public void setImageId(DBSequence value) {
        setAttributeInternal(IMAGEID, value);
    }

    /**
     * Gets the attribute value for DEFAULT_IMAGE using the alias name DefaultImage.
     * @return the DEFAULT_IMAGE
     */
    public String getDefaultImage() {
        return (String) getAttributeInternal(DEFAULTIMAGE);
    }

    /**
     * Sets <code>value</code> as attribute value for DEFAULT_IMAGE using the alias name DefaultImage.
     * @param value value to set the DEFAULT_IMAGE
     */
    public void setDefaultImage(String value) {
        setAttributeInternal(DEFAULTIMAGE, value);
    }

    /**
     * Gets the attribute value for IMAGE_ID using the alias name ImageId1.
     * @return the IMAGE_ID
     */
    public Integer getImageId1() {
        return (Integer) getAttributeInternal(IMAGEID1);
    }

    /**
     * Sets <code>value</code> as attribute value for IMAGE_ID using the alias name ImageId1.
     * @param value value to set the IMAGE_ID
     */
    public void setImageId1(Integer value) {
        setAttributeInternal(IMAGEID1, value);
    }

    /**
     * Gets the attribute value for USAGE_TYPE using the alias name UsageType.
     * @return the USAGE_TYPE
     */
    public String getUsageType() {
        return (String) getAttributeInternal(USAGETYPE);
    }

    /**
     * Sets <code>value</code> as attribute value for USAGE_TYPE using the alias name UsageType.
     * @param value value to set the USAGE_TYPE
     */
    public void setUsageType(String value) {
        setAttributeInternal(USAGETYPE, value);
    }

    /**
     * Gets the attribute value for ASSOCIATED_ID using the alias name AssociatedId.
     * @return the ASSOCIATED_ID
     */
    public Integer getAssociatedId() {
        return (Integer) getAttributeInternal(ASSOCIATEDID);
    }

    /**
     * Sets <code>value</code> as attribute value for ASSOCIATED_ID using the alias name AssociatedId.
     * @param value value to set the ASSOCIATED_ID
     */
    public void setAssociatedId(Integer value) {
        setAttributeInternal(ASSOCIATEDID, value);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link AllJobHistory.
     */
    public RowIterator getAllJobHistory() {
        return (RowIterator) getAttributeInternal(ALLJOBHISTORY);
    }

    /**
     * Gets the associated <code>Row</code> using master-detail link EmpBio.
     */
    public Row getEmpBio() {
        return (Row) getAttributeInternal(EMPBIO);
    }

    /**
     * Sets the master-detail link EmpBio between this object and <code>value</code>.
     */
    public void setEmpBio(Row value) {
        setAttributeInternal(EMPBIO, value);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link AllEmpImages.
     */
    public RowIterator getAllEmpImages() {
        return (RowIterator) getAttributeInternal(ALLEMPIMAGES);
    }

    /**
     * Gets the view accessor <code>RowSet</code> DeptLovAccessor.
     */
    public RowSet getDeptLovAccessor() {
        return (RowSet) getAttributeInternal(DEPTLOVACCESSOR);
    }

    /**
     * Gets the view accessor <code>RowSet</code> JobsLovAccessor.
     */
    public RowSet getJobsLovAccessor() {
        return (RowSet) getAttributeInternal(JOBSLOVACCESSOR);
    }

    /**
     * Gets the view accessor <code>RowSet</code> FilteredManagerLovAccessor.
     */
    public RowSet getFilteredManagerLovAccessor() {
        return (RowSet) getAttributeInternal(FILTEREDMANAGERLOVACCESSOR);
    }

    public void defineDefaultImage(Integer newDefaultImageId) {
        Integer oldDefaultImageId = getImageId() == null ? null : getImageId().getSequenceNumber().intValue();
        if (newDefaultImageId != null && !newDefaultImageId.equals(oldDefaultImageId)) {
            RowSet imageRows = (RowSet) getAllEmpImages();
            AllEmpImagesRowImpl oldDefaultImageRow = findImageUsagesRowByKey(imageRows, oldDefaultImageId);
            AllEmpImagesRowImpl newDefaultImageRow = findImageUsagesRowByKey(imageRows, newDefaultImageId);
            if (newDefaultImageRow != null) {
                newDefaultImageRow.setDefaultImage("Y");
                if (oldDefaultImageRow != null) {
                    oldDefaultImageRow.setDefaultImage("N");
                }
                setEntity(3, newDefaultImageRow.getEmpImageUsages());
                setEntity(4, newDefaultImageRow.getImages());
            }
        }
    }

    private AllEmpImagesRowImpl findImageUsagesRowByKey(RowSet imageRows, Integer imageId) {
        AllEmpImagesRowImpl retRow = null;
        Key key = new Key(new Object[] { getEmployeeId().getSequenceNumber().intValue(), imageId, "E" });
        System.out.println("Start searching with findByKey ...");
        Row[] hits = imageRows.findByKey(key, 1);
        System.out.println("Done searching with findByKey record found = " + hits.length);
        if (hits.length > 0) {            
            retRow = (AllEmpImagesRowImpl) hits[0];
            System.out.println("Found with findByKey = " + retRow.getImage());
        }
        return retRow;
    }
}

