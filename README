This repo will hold my adventures in the Java EE and Oracle ADF world.

DRA 1.1
This version added 2 more enhancements:
- In DraRent project, added a comfirmation popup when Register button is clicked and then the two input text fields
  are cleared for new entry.
- In DraReturn project, added code to strike through the returned record and disable the Return button 
  after the Return button is clicked:
  #{row.bindings.TextFormat.inputValue} for ContentStyle attribute of the table column inputtext fields: TextFormat
   is a transient attribute added to RentalVO to hold the CSS property value to implement the strike-through formatting.
  #{!empty row.bindings.ReturnDate.inputValue} for Diabled attribute of the Return button
- In both cases above, PPR is essential: button click is the trigger, the textfields and the table are the targets 
  using PartialTriggers attribute to register the button events.
- In order to use the TextFormat and ReturnDate attributes in the above ELs, need to modify the RentalUnreturned
  tree binding and move those 2 attributes to the Display Attributes side on the bindings tab

DRA 1.0
DVD Rental Application is built using the code structure as XDM.
Origin: Developing Web Applications with Oracle ADF Essentials by Sten E. Vesterli, 2013 Packt Publishing
Outstanding features:
- Database: MySQL built-in sakila database is used
- View Criteria is used to filter data for CustomerVO
  VC is applied when VO is used in AM: select a VO instance -> Edit -> Shuttle a VC to Selected side
- Pure coding is used to save a rental record using ADF BC API (attribute binding and operation binding)
  Manual creation of action binding for Commit, iterator binding for retrieving a data set (VO)
- Create a ViewRowImpl class to implement a custom row level method, which is executed by a managed bean using ADF BC API.
  this custom method needs to be exposed to Client Row Interface in order to be executable by managed bean.
- Manually bind a UI component(adf table, inputText box) to a managed bean property

XDM 1.1
This version is to exercise the ADF skin.
I have to use the standardalone ADF Skin Editor to create and update a custom skin.  The JDev12c can create a new skin
but cannot display the Property Inspector for modifying CSS properties.
ADF skin is essentially a giant CSS file where a huge number of CSS selectors are defined for all the ADF components.
FireFox plugin, FireBug is a good tool to identify which CSS selector is used for a particular component.
Add the following Context Initialization Parameter to web.xml to enable full name of CSS selectors:
  Name: org.apache.myfaces.trinidad.DISABLE_CONTENT_COMPRESSION
  Value: true
When done skinning work, remove this param or set its value to false(default).
Steps to create and use custom skin:
- Create a skin CSS file.
- Optionally, provide images for your skin.
- Optionally, create a resource bundle for your skin.
- Package the skin in an ADF Library.
- Import and use the skin in the application by changing skin-family and skin-version to your custom skin name and version
  in the WEB-INF/trinidad-config.xml file.

XDM 1.0
This demo is based on the example used in the book:
Oracle ADF Enterprise Application Development - Made Simple
by Sten E. Vesterli, 2014 Packt Publishing
The unique features of this book:
- Describe real world ADF development requirements
- How to organize your code structure:
 -- Enterprise Common Workspace (WS) : containing 4 types of projects: (since the demo is tiny, this layer is omitted)
   --- Common Code - hold common utilities, framework extension classes ...
   --- Common Model - hold EOs, LOV VOs, common VOs used by apps, and AM(if no VO, then AM is not needed)
   --- Common View - hold ADF task flow templates, page templates
   --- Common Skin - hold custom ADF skin definitions for the enterprise
 -- Application Common Workspace (WS) : will inherit all from Enterprise WS and add app-specific contents here
    will contain the same project structure as Enterprise WS
 -- Subsystem WS: one app could contain many subsystems; will inherit all from the App WS
   --- <SubsystemX> Model - hold LOV VOs, VOs specific for this subsystem, and AM
   --- <SubsystemX> View - hold ADF task flows(bounded) and page fragments
 -- Master App WS: will use contents from all above (packaged as ADF libraries); you can have multiple Master WS
   -- <App ID> - hold ADF unbounded task flows and pages, ADF bounded TFs will be rendered in regions (either static
      or dynamic)
- How to use dynamic region to display different bounded TF in response to different event (e.g. a menu item selection)
- How to create and use ADF Libraries
- Tools used: 
  JDev12c (12.1.2)
  Subversion and Git for VCS
- Database: Oracle XE
